//Queue reversal

queue<int> rev(queue<int> q)
{
    stack<int> s;
    while(!q.empty())
    {
        int element=q.front();
        q.pop();
        s.push(element);
    }
    
    while(!s.empty())
    {
       int  element =s.top();
        s.pop();
        q.push(element);
    }
    return q;
    // add code here.
}






// Function to reverse first k elements of a queue.
queue<int> modifyQueue(queue<int> q, int k) {
    // add code here.
    stack<int > s;
    queue <int> q1;
       int count=1;
    while(count<=k)
    {
        int element=q.front();
        q.pop();
        s.push(element);
        count++;
    }
   
    
    while(!s.empty())
    {
        int element=s.top();
        s.pop();
        q1.push(element);
        
    }
   
    while(!q.empty())
    {
         int element=q.front();
        q.pop();
        q1.push(element);
    }
    
    return q1;
}




//First non-repeating character in a stream


	string FirstNonRepeating(string A){
		    // Code here
		    
		   unordered_map<char,int>count;
		    queue<int> q;
		    string ans="";
		    
		    for(int i=0;i<A.length();i++)
		    {
		        char ch=A[i];
		        count[ch]++;
		        q.push(ch);
		        
		        while(!q.empty())
		        {
		            if(count[q.front()]>1)
		            {
		                q.pop();
		            }
		            else{
		                
		            ans.push_back(q.front());
		            break;
		            }
		        }
		        
		    
		     if(q.empty())
		            ans.push_back('#');
		    }   
		        return ans;
		    }
		    
		
